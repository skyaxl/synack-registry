// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRegistries(t *testing.T) {
	t.Parallel()

	query := Registries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRegistriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Registries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegistrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RegistryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Registry exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RegistryExists to return true, but got false.")
	}
}

func testRegistriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	registryFound, err := FindRegistry(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if registryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRegistriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Registries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRegistriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Registries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRegistriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	registryOne := &Registry{}
	registryTwo := &Registry{}
	if err = randomize.Struct(seed, registryOne, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}
	if err = randomize.Struct(seed, registryTwo, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = registryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = registryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Registries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRegistriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	registryOne := &Registry{}
	registryTwo := &Registry{}
	if err = randomize.Struct(seed, registryOne, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}
	if err = randomize.Struct(seed, registryTwo, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = registryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = registryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func registryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func testRegistriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Registry{}
	o := &Registry{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, registryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Registry object: %s", err)
	}

	AddRegistryHook(boil.BeforeInsertHook, registryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	registryBeforeInsertHooks = []RegistryHook{}

	AddRegistryHook(boil.AfterInsertHook, registryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	registryAfterInsertHooks = []RegistryHook{}

	AddRegistryHook(boil.AfterSelectHook, registryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	registryAfterSelectHooks = []RegistryHook{}

	AddRegistryHook(boil.BeforeUpdateHook, registryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	registryBeforeUpdateHooks = []RegistryHook{}

	AddRegistryHook(boil.AfterUpdateHook, registryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	registryAfterUpdateHooks = []RegistryHook{}

	AddRegistryHook(boil.BeforeDeleteHook, registryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	registryBeforeDeleteHooks = []RegistryHook{}

	AddRegistryHook(boil.AfterDeleteHook, registryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	registryAfterDeleteHooks = []RegistryHook{}

	AddRegistryHook(boil.BeforeUpsertHook, registryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	registryBeforeUpsertHooks = []RegistryHook{}

	AddRegistryHook(boil.AfterUpsertHook, registryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	registryAfterUpsertHooks = []RegistryHook{}
}

func testRegistriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegistriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(registryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegistryToOneUserUsingUserNameUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Registry
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserName, foreign.UserName)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserNameUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.UserName, foreign.UserName) {
		t.Errorf("want: %v, got %v", foreign.UserName, check.UserName)
	}

	slice := RegistrySlice{&local}
	if err = local.L.LoadUserNameUser(ctx, tx, false, (*[]*Registry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserNameUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserNameUser = nil
	if err = local.L.LoadUserNameUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserNameUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRegistryToOneSetOpUserUsingUserNameUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUserNameUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserNameUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserNameRegistry != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserName, x.UserName) {
			t.Error("foreign key was wrong value", a.UserName)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserName))
		reflect.Indirect(reflect.ValueOf(&a.UserName)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserName, x.UserName) {
			t.Error("foreign key was wrong value", a.UserName, x.UserName)
		}
	}
}

func testRegistryToOneRemoveOpUserUsingUserNameUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUserNameUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUserNameUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UserNameUser().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UserNameUser != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserName) {
		t.Error("foreign key value should be nil")
	}

	if b.R.UserNameRegistry != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testRegistriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegistriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegistrySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegistriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Registries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	registryDBTypes = map[string]string{`ID`: `VARCHAR(500)`, `UserName`: `VARCHAR(50)`, `Request`: `BLOB`, `Response`: `BLOB`}
	_               = bytes.MinRead
)

func testRegistriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(registryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(registryAllColumns) == len(registryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, registryDBTypes, true, registryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRegistriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(registryAllColumns) == len(registryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, registryDBTypes, true, registryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(registryAllColumns, registryPrimaryKeyColumns) {
		fields = registryAllColumns
	} else {
		fields = strmangle.SetComplement(
			registryAllColumns,
			registryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RegistrySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
